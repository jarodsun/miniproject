// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户角色枚举
enum UserRole {
  ADMIN  // 管理员
  USER   // 普通用户
}

// 交易类型枚举
enum TransactionType {
  INBOUND   // 入库
  OUTBOUND  // 出库
}

// 系统用户表
model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?

  // 关系
  sessions UserSession[]

  @@map("users")
}

// 系统用户会话表
model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  deviceInfo String?
  createdAt DateTime @default(now())

  // 关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// 货品表
model Product {
  id            String   @id @default(cuid())
  name          String
  specification String?
  unit          String   @default("个")
  currentStock  Int      @default(0)
  imageUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关系
  transactions Transaction[]

  @@map("products")
}

// 商家表
model Merchant {
  id        String   @id @default(cuid())
  name      String
  contact   String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  transactions Transaction[]

  @@map("merchants")
}

// 出入库记录表
model Transaction {
  id          String          @id @default(cuid())
  productId   String
  merchantId  String?
  type        TransactionType
  quantity    Int
  date        DateTime        @default(now())
  notes       String?
  createdAt   DateTime        @default(now())

  // 关系
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  merchant  Merchant? @relation(fields: [merchantId], references: [id], onDelete: SetNull)

  @@map("transactions")
}
